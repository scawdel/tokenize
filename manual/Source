<document title="Tokenize">
<define name="version" value="">
<define name="date" value="" length=30 align="right">




<literal mode="Text">
=============================================================================
Tokenize - Turn ASCII Files into Tokenized BASIC                 Version $$version$$

(c) Stephen Fryatt, 2014                       $$date$$
=============================================================================

</literal>



<chapter title="Licence" file="Licence">

<cite>Tokenize</cite> is licensed under the EUPL, Version&nbsp;1.1 only (the &ldquo;Licence&rdquo;); you may not use this work except in compliance with the Licence.

You may obtain a copy of the Licence at <link ref="#url http://joinup.ec.europa.eu/software/page/eupl">http://joinup.ec.europa.eu/software/page/eupl</link>

Unless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an &ldquo;<strong>as is</strong>&rdquo; basis, <strong>without warranties or conditions of any kind</strong>, either express or implied.

See the Licence for the specific language governing permissions and limitations under the Licence.

The source for <cite>MenuGen</cite> can be found alongside this binary download, at <link ref="#url http://www.stevefryatt.org.uk/software">http://www.stevefryatt.org.uk/software</link>

</chapter>




<chapter title="Introduction" file="Introduction">

<cite>Tokenize</cite> is a tool for converting ASCII text files into tokenized BASIC (of the ARM&nbsp;BASIC&nbsp;V variety) at the command line. It is written in C, and can be compiled to run on platforms other than RISC&nbsp;OS.

In addition to tokenizing files, <cite>Tokenize</cite> can link multiple library files into a single output &ndash; both by passing multiple source files on the command line and by processing (and removing) <code>LIBRARY</code> statements in the source.

Finally, <cite>Tokenize</cite> can perform the actions of the BASIC <code>CRUNCH</code> command on the tokenized output.

</chapter>



<chapter title="Commad Line Usage" file="Use">

<cite>Tokenize</cite> is a command line tool, and should placed in your library or on your path as appropriate. Once installed, it can be used in its most basic form as

<command>tokenize &lt;source&nbsp;file&nbsp;1&gt; [&lt;source&nbsp;file&nbsp;2&gt; ...] -out &lt;output&gt;</command>

where one or more source files are tokenized into a single output file.

It is possible to add the <param>-verbose</param> parameter switch, in which case <cite>Tokenize</cite> will generate more detailed information about what it is doing.


<subhead title="Source Files">

The source files used by <cite>Tokenize</cite> are plain ASCII text: as saved from BASIC using the <code>TEXTSAVE<code> command, or by loading a BASIC file into a text editor and saving it as text.

The same requirements in terms of spacing and layout are placed on the files as would be applied by BASIC&rsquo;s own tokenizer. The only difference is that &ndash; as with editing BASIC in most text editors on RISC&nbsp;OS &ndash; line numbers are optional. Thus a file could read

<codeblock>
 80 FOR I% = 1 TO 10
 90   PRINT "Hello World!"
100 NEXT I%
</codeblock>

but it could equally read

<codeblock>
FOR I% = 1 TO 10
  PRINT "Hello World!"
NEXT I%
</codeblock>

In the latter case, the line numbers will be applied automatically as described in the following section.

Keyword abbreviations are fully supported, using the rules defined in the <cite>BASIC Reference Manual</cite>. Thus <code>PRINT</code> and <code>P.</code> would both covert into the same token, while <code>OR</code> and <code>OR.</code> would not. For clarity, the use of abbreviations in source code is discouraged.


<subhead title="Line Numbers">

All BASIC programs must have line numbers, but if they are not included in its source files <cite>Tokenize</cite> will add them automatically.

A line number is considered to be any digits at the start of a line &ndash; otherwise, lines should start with non-numeric characters. The whitespace around line numbers is optional; if a number is present, the space before it will be ignored for the purposes of indenting what follows.

If line numbers are present in the source files, then they will be used in the output. If they are not present, then <cite>Tokenize</cite> will number the lines it creates automatically and increment using the value given by the <param>-increment</param> parameter &ndash; this defaults to 10 if not specified.

If line numbers are given, they must be sequential: duplicate numbers are not allowed, and lines can not be numbered backwards. It is possible to mix numbered and un-numbered lines, in which case <cite>Tokenize</cite> will switch between the two numbering methods: numbers must still be sequential, and if the numbered lines break the automatic sequence an error will be given. Thus

<codeblock>
   FOR I% = 1 TO 10
15   PRINT "Hello World!"
   NEXT I%
</codeblock>

would be valid using the default value for <param>-increment</param> and would result in lines 10, 15 and 25 being generated. However

<codeblock>
   FOR I% = 1 TO 10
 5   PRINT "Hello World!"
   NEXT I%
</codeblock>

would not be valid, and would give the error &ldquo;Line number 5 out of sequence at line 2 of &lsquo;example file&rsquo;&rdquo; (because this would be trying to create the sequence 10, 5 and 15 using the default settings of <param>-increment</param>).


<subhead title="Linking and Libraries">

Used with a single source file, <cite>Tokenize</cite> will take the file and convert it into a single tokenized BASIC program:

<command>tokenize &lt;source&nbsp;file&gt; -out &lt;output&nbsp;file&gt;</command>

If more than one source file is specified, then the files will be concatenated in the order that they are included in the parameters:

<command>tokenize &lt;source&nbsp;1&gt; &lt;source&nbsp;2&gt; &lt;source&nbsp;3&gt; -out &lt;output&nbsp;file&gt;</command>

would result in the files being linked in the order

<codeblock>
REM File 1
REM File 2
REM File 3
</codeblock>

In addition to files explicitly given on the command line, <cite>Tokenize</cite> can link in files referenced via <code>LIBRARY</code> commands in the source files themselves. Thus if the statement <code>LIBRARY &quot;MoreCode&quot;</code> was included in a source file, the file <file>MoreCode</file> would be added to the list of files to be linked in and the statement would be removed from the tokenized output. Such files will be added to the queue for linking after any given on the command line, and will be processed in the order that their are found in the source.

All <code>LIBRARY</code> commands will be processed, including any found within linked source files. The filenames given to <code>LIBRARY</code> must be string constants: if a variable is encountered (eg. <code>LIBRARY variable$</code>) then the statement will be left in the tokenized output and a warning will be given. Filenames found in <code>LIBRARY<code> commands are assumed to be in &lsquo;local&rsquo; format, including being treated as having relative location if applicable.

The only concession to RISC&nbsp;OS usage is that it is possible to specify &lsquo;path variables&rsquo; so that statements such as <code>LIBRARY &quot;BASIC:Library&quot;</code> can be used. On RISC&nbsp;OS, such a filename would resolve to the file <file>Library</file> somewhere on <code>&lt;BASIC$Path&gt;</code>. <cite>Tokenize</cite> allows paths to be specified using the <param>-path</param> parameter: <command>-param BASIC:libs/</command> would mean that <code>BASIC:</code> would expand to <code>libs/</code> and therefore result in <code>LIBRARY &quot;libs/Library&quot;</code> for the example here. As with RISC&nbsp;OS path variables, paths must end with a directory separator in the local format.

More than one <param>-path</param> parameter can be specified on the command line if required.


<subhead title="Indentation and Crunching">

<cite>Tokenize</cite> can adjust the indentation and spacing of the BASIC source when generating tokenized output.

By default, any whitespace before a leading line number is ignored. Whitespace folloiwing the line number is retained, and used in the output. Thus both

<codeblock>
REM >Example
REM
:
FOR I% = 1 TO 10
  PRINT "Hello World!"
NEXT I%
</codeblock>

and

<codeblock>
 10REM >Example
 20REM
 30:
100FOR I% = 1 TO 10
110  PRINT "Hello World!"
120NEXT I%
</codeblock>

would both result in the same indentation. If a space were left between the line number and the rest of the statement in the second example, then this would be copied to the resulting file.

If tabs are used, then these will be expanded into spaces so that the align with the next tab stop if all the preceeding keywords are fully expanded. By default tab stops are 8 columns apart, but this can be changed using the <param>-tab</param> parameter: for example <command>tokenize -tab 4</command> to use four column tabs. Due to the requirement to expand keywords, using tabs can have unexpected effects if abbreviated keywords are used in the source. It is recommended to configure <cite>Tokenize</cite> to use the same tab width as set in the text editor used to edit the source code.

The <param>-crunch</param> parameter can be used to make <cite>Tokenize</cite> reduce whitespace within the tokenized BASIC file.


</chapter>


<chapter title="Errors and Warnings" file="Errors">


Variable LIBRARY not linked.


</chapter>



<chapter title="Version History" file="History">

Here is a list of the versions of <cite>Tokenize</cite>, along with all the changes made.


<subhead title="0.01 (17 February 2001)">

Initial developments.


</chapter>





<literal mode="Text">

Updates and Contacting Me
-------------------------

  If you have any comments about Tokenize, or would like to report any bugs
  that you find, you can email me at the address below.

  Updates to Tokenize and more software for RISC OS computers can be found
  on my website at http://www.stevefryatt.org.uk/software/

  Stephen Fryatt
  email: steve@stevefryatt.org.uk
</literal>
